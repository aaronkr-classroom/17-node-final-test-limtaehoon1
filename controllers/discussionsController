// controllers/discussionsController.js
"use strict";

const res = require("express/lib/response");
const { update } = require("./usersController");
const Discussion = require("../models/Discussion"), // 사용자 모델 요청
  getDiscussionParams = (body, user) => {
    return {
      title: body.title,
      description: body.description,
      author: user,
      category: body.category,
      tags: body.tags,
    };
  };
module.exports = {
  
  new: (req, res) => {
    res.render("discussions/new", {
      page: "new-discussions",
      title: "New discussions",
    });
  },
  create: (req, res, next) => {
    let discussionParams = getDiscussionParams(req.body, req.user);

    Discussion.create(discussionParams)
      .then((discussion) => {
        res.locals.redirect = "/discussions";
        res.locals.discussion = discussion;
        next();
      })
      .catch((error) => {
        console.log(`Error saving discussion: ${error.message}`);
        next(error);
      });
  },
  redirectView: (req, res, next) => {
    const redirectPath = res.locals.redirect;
    if (redirectPath) res.redirect(redirectPath);
    else next();
  },

  
  index: (req, res, next) => {
    Discussion.find()
      .populate("author")
      .exec()
      .then((discussions) => {
        res.locals.discussions = discussions;
        next();
      })
      .catch((error) => {
        console.log(`Error fetching discussions: ${error.message}`);
        next(error);
      });
  },
  indexView: (req, res) => {
    res.render("discussions/index", {
      page: "discussions",
      title: "Discussions",
    }); // 분리된 액션으로 뷰 렌더링
  },
  show: (req, res, next) => {
    let discussionId = req.params.id; // request params로부터 토론 ID 수집
    Discussion.findById(discussionId) // ID로 토론 찾기
      .populate("author")
      .populate("comments")
      .then((discussion) => {
        discussion.views++; // 조회수 증가
        discussion.save() // 변경된 조회수 저장
          .then(() => {
            res.locals.discussion = discussion; // 응답 객체를 통해 다음 미들웨어 함수로 토론 전달
            next();
          })
          .catch((error) => {
            console.log(`Error saving discussion views: ${error.message}`);
            next(error); // 에러를 로깅하고 다음 함수로 전달
          });
      })
      .catch((error) => {
        console.log(`Error fetching discussion by ID: ${error.message}`);
        next(error); // 에러를 로깅하고 다음 함수로 전달
      });
  },
  showView: (req, res) => {
    res.render("discussions/show", {
      page: "discussion-details",
      title: "Discussion Details",
    });
  },
  
  edit: (req, res, next) => {
    let discussionId = req.params.id;
    Discussion.findById(discussionId)
      .populate("author")
      .populate("comments")
      .then((discussion) => {
        res.render("discussions/edit", {
          discussion: discussion,
          page: discussion.name,
          title: "Edit discussion",
        });
      })
      .catch((error) => {
        console.log(`Error fetching discussion by ID: ${error.message}`);
        next(error);
      });
  },
  update: (req, res, next) => {
    let discussionId = req.params.id;
    let discussionParams = getDiscussionParams(req.body);
  
    Discussion.findByIdAndUpdate(discussionId, {
      $set: discussionParams,
    })
      .populate("author")
      .then((discussion) => {
        res.locals.redirect = `/discussions/${discussionId}`;
        res.locals.discussion = discussion;
        next();
      })
      .catch((error) => {
        console.log(`Error updating discussion by ID: ${error.message}`);
        next(error);
      });
  },
  delete: (req, res, next) => {
    let userId = req.params.id;
    User.findByIdAndRemove(userId) // findByIdAndRemove 메소드를 이용한 사용자 삭제
      .then(() => {
        res.locals.redirect = "/discussions";
        next();
      })
      .catch((error) => {
        console.log(`Error deleting user by ID: ${error.message}`);
        next();
      });
  },
};
